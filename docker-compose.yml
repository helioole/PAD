services:
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock 
    depends_on:
      - sports-service
      - user-service
    environment:
      - SPORTS_SERVICE_URL=http://sports-service:5001
      - USER_SERVICE_URL=http://user-service:5002
    networks:
      - app-network

  sports-service:
    build:
      context: ./sports-service
      dockerfile: Dockerfile
    ports:
      - "5001"
    expose:
      - "50051"
    depends_on:
      - mongo
    networks:
      - app-network
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

      resources:
        limits:
          memory: 512M


  user-service:
    build:
      context: ./user-service
    volumes:
      - ./user-service:/app
    command: python app.py
    # command: pytest tests/user_service_test.py --maxfail=1 --disable-warnings -v
    expose:
      - "5002"
    depends_on:
      - mongo
    networks:
      - app-network
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  websocket-service:
    build:
      context: ./websocket
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - redis-cluster-init-node
    networks:
      - app-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  mongo:
    image: mongo:4.2
    ports:
      - "27017:27017"
    volumes:
      - ./data/mongo:/data/db
    networks:
      - app-network

  # redis:
  #   image: redis:6.0
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - app-network

  redis-node-1:
    image: bitnami/redis-cluster:latest
    container_name: redis-node-1
    environment:
      - REDIS_NODES=redis-node-1,redis-node-2,redis-node-3,redis-node-4,redis-node-5,redis-node-6
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"
    networks:
      - app-network
    tmpfs:
      - /bitnami/redis

  redis-node-2:
    image: bitnami/redis-cluster:latest
    container_name: redis-node-2
    environment:
      - REDIS_NODES=redis-node-1,redis-node-2,redis-node-3,redis-node-4,redis-node-5,redis-node-6
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6380:6379"
    networks:
      - app-network
    tmpfs:
      - /bitnami/redis

  redis-node-3:
    image: bitnami/redis-cluster:latest
    container_name: redis-node-3
    environment:
      - REDIS_NODES=redis-node-1,redis-node-2,redis-node-3,redis-node-4,redis-node-5,redis-node-6
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6381:6379"
    networks:
      - app-network
    tmpfs:
      - /bitnami/redis

  redis-node-4:
    image: bitnami/redis-cluster:latest
    container_name: redis-node-4
    environment:
      - REDIS_NODES=redis-node-1,redis-node-2,redis-node-3,redis-node-4,redis-node-5,redis-node-6
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6382:6379"
    networks:
      - app-network
    tmpfs:
      - /bitnami/redis

  redis-node-5:
    image: bitnami/redis-cluster:latest
    container_name: redis-node-5
    environment:
      - REDIS_NODES=redis-node-1,redis-node-2,redis-node-3,redis-node-4,redis-node-5,redis-node-6
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6383:6379"
    networks:
      - app-network
    tmpfs:
      - /bitnami/redis

  redis-node-6:
    image: bitnami/redis-cluster:latest
    container_name: redis-node-6
    environment:
      - REDIS_NODES=redis-node-1,redis-node-2,redis-node-3,redis-node-4,redis-node-5,redis-node-6
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6384:6379"
    networks:
      - app-network
    tmpfs:
      - /bitnami/redis

  redis-cluster-init-node:
    container_name: redis-cluster-init-node
    image: bitnami/redis-cluster:latest
    entrypoint: >
      /bin/bash -c '
      until redis-cli -h redis-node-1 -p 6379 ping; do sleep 1; done &&
      redis-cli --cluster create redis-node-1:6379 redis-node-2:6379 redis-node-3:6379 redis-node-4:6379 redis-node-5:6379 redis-node-6:6379 --cluster-replicas 1 --cluster-yes'
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6
    networks:
      - app-network

  user-service-tests:
    build:
      context: ./user-service
    # command: pytest --maxfail=1 --disable-warnings -v
    depends_on:
      - user-service

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network
    depends_on:
      - api-gateway
      - user-service
      - sports-service
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - app-network
    restart: always

networks:
  app-network:
    driver: bridge